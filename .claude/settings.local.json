{
  "permissions": {
    "allow": [
      "Bash(mkdir:*)",
      "Bash(find:*)",
      "Read(//home/matt/code/musashi/.claude/guidance/**)",
      "Bash(while read file)",
      "Bash(done)",
      "Bash(sort:*)",
      "mcp__gemini-bridge__consult_gemini_with_files",
      "mcp__gemini-bridge__consult_gemini",
      "Bash(tree:*)",
      "Bash(grep:*)",
      "Read(//home/matt/code/musashi/spec/services/seismic/**)",
      "Read(//home/matt/code/musashi/.claude/**)",
      "Read(//home/matt/.local/bin/**)",
      "WebFetch(domain:www.reddit.com)",
      "Read(//home/matt/code/crouton-claude/**)",
      "Read(//home/matt/code/village/.claude/**)",
      "WebFetch(domain:docs.claude.com)",
      "WebFetch(domain:gist.github.com)",
      "WebFetch(domain:github.com)",
      "Bash(claude-code --help)",
      "Bash(if [ -f \"$HOME/.claude/python-env/bin/python\" ])",
      "Bash(then echo \"✅ Claude Python environment found\")",
      "Bash(else echo \"❌ Need to run setup: ~/.claude/commands/setup-claude-python-env.sh\")",
      "Bash(fi)",
      "Bash(source:*)",
      "Bash(python:*)",
      "Bash(python3:*)",
      "Bash(echo:*)",
      "Bash(awk:*)",
      "Bash(/home/matt/.claude/commands/compress-guidance-wrapper.sh:*)",
      "Read(//usr/bin/**)",
      "Bash(chmod:*)",
      "Bash(~/.claude/python-env/bin/python:*)",
      "Bash(cat:*)",
      "Bash(__NEW_LINE__ echo \"1. project-plan.md alternatives:\")",
      "Bash(__NEW_LINE__ find ~/.claude/guidance -name \"*project*\" -type f)",
      "Bash(__NEW_LINE__ echo -e \"\\n2. architecture-decisions.md alternatives:\")",
      "Bash(__NEW_LINE__ find ~/.claude/guidance -name \"*architecture*\" -o -name \"*decision*\" -type f)",
      "Bash(__NEW_LINE__ echo -e \"\\n3. tdd-principles.md alternatives:\")",
      "Bash(__NEW_LINE__ find ~/.claude/guidance -name \"*tdd*\" -o -name \"*test*\" -type f)",
      "Bash(__NEW_LINE__ echo -e \"\\n4. testing-strategy.md alternatives:\")",
      "Bash(__NEW_LINE__ find ~/.claude/guidance -name \"*test*\" -o -name \"*strategy*\" -type f)",
      "Read(//home/matt/code/musashi/**)",
      "Bash(rspec test-hook-failure_spec.rb:*)",
      "Bash(docker exec:*)",
      "Bash(/tmp/test_rspec_hook_fix.sh:*)",
      "Bash(/tmp/test_rspec_hook_fixed.sh:*)",
      "Bash(/tmp/test_rspec_failure_handling.sh:*)",
      "Bash(/tmp/hook_fixes_summary.sh:*)",
      "Bash(for file in )",
      "Bash(~/.claude/guidance/ai-development/ultra-concise-enforcement.md )",
      "Bash(~/.claude/guidance/testing/tdd-principles.md )",
      "Bash(~/.claude/guidance/testing/testing-strategy.md )",
      "Bash(~/.claude/guidance/code-quality/code-review-principles.md )",
      "Bash(~/.claude/guidance/code-quality/error-handling.md )",
      "Bash(~/.claude/guidance/security/validation-and-authorization.md )",
      "Bash(~/.claude/guidance/git/commit-verification-workflow.md )",
      "Bash(~/.claude/guidance/communication/balanced-analysis.md )",
      "Bash(~/.claude/guidance/bundles/foundation/software-dev.md )",
      "Bash(~/.claude/guidance/development-process/spec-kit-workflow.md )",
      "Bash(~/.claude/guidance/documentation/task-handoffs.md )",
      "Bash(~/.claude/guidance/development-process/task-list-management.md )",
      "Bash(~/.claude/guidance/ai-development/context-optimization.md )",
      "Bash(~/.claude/guidance/relevant.md)",
      "Bash(do)",
      "Bash(if [ -f \"$file\" ])",
      "Bash(then)",
      "Bash(else)",
      "Bash(sed:*)",
      "Bash(/tmp/claude/validate_references.sh:*)",
      "Bash(/tmp/claude/validate_final.sh:*)",
      "Bash(/tmp/claude/validate_clean.sh:*)",
      "Bash(/home/matt/.claude/commands/validate-guidance.sh:*)",
      "Bash(git clone:*)",
      "Bash(bun:*)",
      "WebFetch(domain:bun.sh)",
      "Bash(curl:*)",
      "Bash(bash)",
      "Bash(~/.bun/bin/bun:*)",
      "mcp__guidance__guidance_load",
      "Bash(rg:*)",
      "Bash(node -e \"\nconst fs = require(''fs'');\nconst yaml = require(''yaml'');\nconst content = fs.readFileSync(''$HOME/.claude/guidance/bundles/technique/rails.md'', ''utf8'');\nconst match = content.match(/^---\\n([\\s\\S]*?)\\n---/);\nif (match) {\n  const frontmatter = yaml.parse(match[1]);\n  console.log(JSON.stringify(frontmatter, null, 2));\n}\n\")",
      "Bash(pkill:*)",
      "mcp__guidance__guidance_bundle_load",
      "WebSearch",
      "WebFetch(domain:claudelog.com)",
      "WebFetch(domain:www.arsturn.com)"
    ],
    "deny": [],
    "ask": []
  },
  "hooks": {
    "PostToolUse": [
      {
        "matcher": "Edit|MultiEdit|Write",
        "hooks": [
          {
            "type": "command",
            "command": "/home/matt/.claude/hooks/run-spec-for-ruby-file.sh"
          },
          {
            "type": "command",
            "command": "/home/matt/.claude/hooks/rubocop-lint-ruby-file.sh"
          },
          {
            "type": "command",
            "command": "/home/matt/.claude/hooks/rubocop-autocorrect-notify.sh"
          },
          {
            "type": "command",
            "command": "/home/matt/.claude/hooks/eslint-autocorrect-notify.sh"
          }
        ]
      }
    ]
  }
}